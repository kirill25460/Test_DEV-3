{"mappings":"AAEA,MAAMA,EAAYC,SAASC,eAAe,aACpCC,EAAcF,SAASC,eAAe,eACtCE,EAASH,SAASC,eAAe,UAEvCF,EAAUK,iBAAiB,YAAaC,IAClB,UAAdA,EAAMC,MACNH,EAAOI,YAAcR,EAAUS,MAAK,IAI5CN,EAAYE,iBAAiB,SAAS,KAClCD,EAAOI,YAAcR,EAAUS,KAAK,IAGxC,IACIC,EAAQC,EAAQC,EAAMC,EADtBC,GAAa,EAEbC,EAAgB,GAwBpB,SAASC,EAAkBC,GACvB,MAAMC,EAAOD,EAAQE,wBACrB,OAAOD,EAAKE,MAAQC,KAAKC,IAAIZ,EAAQE,IAC9BM,EAAKK,OAASF,KAAKG,IAAId,EAAQE,IAC/BM,EAAKO,KAAOJ,KAAKC,IAAIX,EAAQE,IAC7BK,EAAKQ,QAAUL,KAAKG,IAAIb,EAAQE,E,CAG3C,SAASc,IACL,MAAMC,EAAOxB,EAAOI,YACpBJ,EAAOyB,UAAY,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CAClC,MAAME,EAAO/B,SAASgC,cAAc,QACpCD,EAAKxB,YAAcoB,EAAKE,GACpBd,EAAkBgB,KAClBA,EAAKE,MAAMC,MAAQ,OAEvB/B,EAAOgC,YAAYJ,E,EAvC3B5B,EAAOC,iBAAiB,aAAcC,IAClCQ,GAAa,EACbJ,EAASJ,EAAM+B,QACf1B,EAASL,EAAMgC,QACf1B,EAAON,EAAM+B,QACbxB,EAAOP,EAAMgC,OAAO,IAGxBrC,SAASI,iBAAiB,aAAcC,IAChCQ,IACAF,EAAON,EAAM+B,QACbxB,EAAOP,EAAMgC,QACbX,I,IAIR1B,SAASI,iBAAiB,WAAW,KAC7BS,IACAA,GAAa,EACba,I,IA4BR,IAAIY,EAAgB,KAChBC,EAAU,EACVC,EAAU,EAIdxC,SAASI,iBAAiB,aAAcC,IACpC,MAAMoC,EAASpC,EAAMoC,OACrB,GAAwB,SAApBA,EAAOC,SAAqB,CAC5BJ,EAAgBG,EAChB,MAAMxB,EAAOqB,EAAcpB,wBAC3ByB,iBAAmBtC,EAAM+B,QAAUnB,EAAKE,KACxCyB,iBAAmBvC,EAAMgC,QAAUpB,EAAKO,IACxCe,EAAUtB,EAAKE,KAAOd,EAAM+B,QAC5BI,EAAUvB,EAAKO,IAAMnB,EAAMgC,QAC3BC,EAAcL,MAAMY,SAAW,WAC/BP,EAAcL,MAAMa,OAAS,IAC7B9C,SAAS+C,KAAKZ,YAAYG,E,KAKlCtC,SAASI,iBAAiB,aAAcC,IACpC,GAAIiC,EAAe,CACf,MAAMU,EAAe3C,EAAM+B,QAAUG,EAC/BU,EAAe5C,EAAMgC,QAAUG,EACrC,IAAIU,GAAc,EAElBpC,EAAcqC,SAAQpB,IAClB,GAAIA,EAAKqB,UAAUC,SAAS,aAAetB,IAASO,EAAe,CAC/D,MAAMrB,EAAOc,EAAKb,wBACdE,KAAKkC,IAAIrC,EAAKE,KAAO6B,GAAgB,IACrCE,GAAc,E,KAKrBA,GAIDZ,EAAcL,MAAMd,KAAO6B,EAAgB,GAAM,KACjDV,EAAcL,MAAMT,IAAMyB,EAAe,OAJzCX,EAAcL,MAAMd,KAAO6B,EAAe,KAC1CV,EAAcL,MAAMT,IAAMyB,EAAe,K,KAUrDjD,SAASI,iBAAiB,WAAW,KAC7BkC,IACAA,EAAcL,MAAMY,SAAW,WAC/BP,EAAcL,MAAMa,OAAS,OAC7BR,EAAgB,K","sources":["src/index.js"],"sourcesContent":["import './css/styles.css';\n\nconst inputText = document.getElementById('inputText');\nconst applyButton = document.getElementById('applyButton');\nconst result = document.getElementById('result');\n\ninputText.addEventListener('keypress', (event) => {\n    if (event.key === 'Enter') {\n        result.textContent = inputText.value;\n    }\n});\n\napplyButton.addEventListener('click', () => {\n    result.textContent = inputText.value;\n});\n\nlet isDragging = false;\nlet startX, startY, endX, endY;\nlet selectedSpans = [];\n\nresult.addEventListener('mousedown', (event) => {\n    isDragging = true;\n    startX = event.clientX;\n    startY = event.clientY;\n    endX = event.clientX;\n    endY = event.clientY;\n});\n\ndocument.addEventListener('mousemove', (event) => {\n    if (isDragging) {\n        endX = event.clientX;\n        endY = event.clientY;\n        updateSelection();\n    }\n});\n\ndocument.addEventListener('mouseup', () => {\n    if (isDragging) {\n        isDragging = false;\n        updateSelection();\n    }\n});\nfunction isInsideSelection(element) {\n    const rect = element.getBoundingClientRect();\n    return rect.left >= Math.min(startX, endX) &&\n           rect.right <= Math.max(startX, endX) &&\n           rect.top >= Math.min(startY, endY) &&\n           rect.bottom <= Math.max(startY, endY);\n}\n\nfunction updateSelection() {\n    const text = result.textContent;\n    result.innerHTML = '';\n    for (let i = 0; i < text.length; i++) {\n        const span = document.createElement('span');\n        span.textContent = text[i];\n        if (isInsideSelection(span)) {\n            span.style.color = 'red';\n        }\n        result.appendChild(span);\n    }\n}\n\n\n\n\n\nlet draggedLetter = null;\nlet offsetX = 0;\nlet offsetY = 0;\n\n\n\ndocument.addEventListener('mousedown', (event) => {\n    const target = event.target;\n    if (target.nodeName === 'SPAN') {\n        draggedLetter = target;\n        const rect = draggedLetter.getBoundingClientRect();\n        initialPositionX = event.clientX - rect.left;\n        initialPositionY = event.clientY - rect.top;\n        offsetX = rect.left - event.clientX;\n        offsetY = rect.top - event.clientY;\n        draggedLetter.style.position = 'absolute';\n        draggedLetter.style.zIndex = 1000;\n        document.body.appendChild(draggedLetter);\n    }\n});\n\n\ndocument.addEventListener('mousemove', (event) => {\n    if (draggedLetter) {\n        const newPositionX = event.clientX + offsetX;\n        const newPositionY = event.clientY + offsetY;\n        let isColliding = false;\n\n        selectedSpans.forEach(span => {\n            if (span.classList.contains('selected') && span !== draggedLetter) {\n                const rect = span.getBoundingClientRect();\n                if (Math.abs(rect.left - newPositionX) < 1) {\n                    isColliding = true;\n                }\n            }\n        });\n\n        if (!isColliding) {\n            draggedLetter.style.left = newPositionX + 'px';\n            draggedLetter.style.top = newPositionY + 'px';\n        } else {\n            draggedLetter.style.left = (newPositionX + 10) + 'px'; \n            draggedLetter.style.top = newPositionY + 'px';\n        }\n    }\n});\n\n\n\ndocument.addEventListener('mouseup', () => {\n    if (draggedLetter) {\n        draggedLetter.style.position = 'absolute';\n        draggedLetter.style.zIndex = 'auto';\n        draggedLetter = null;\n    }\n});\n\n\n\n"],"names":["$1f0dc3b9307be026$var$inputText","document","getElementById","$1f0dc3b9307be026$var$applyButton","$1f0dc3b9307be026$var$result","addEventListener","event","key","textContent","value","$1f0dc3b9307be026$var$startX","$1f0dc3b9307be026$var$startY","$1f0dc3b9307be026$var$endX","$1f0dc3b9307be026$var$endY","$1f0dc3b9307be026$var$isDragging","$1f0dc3b9307be026$var$selectedSpans","$1f0dc3b9307be026$var$isInsideSelection","element","rect","getBoundingClientRect","left","Math","min","right","max","top","bottom","$1f0dc3b9307be026$var$updateSelection","text","innerHTML","i","length","span","createElement","style","color","appendChild","clientX","clientY","$1f0dc3b9307be026$var$draggedLetter","$1f0dc3b9307be026$var$offsetX","$1f0dc3b9307be026$var$offsetY","target","nodeName","initialPositionX","initialPositionY","position","zIndex","body","newPositionX","newPositionY","isColliding","forEach","classList","contains","abs"],"version":3,"file":"index.3454dafa.js.map"}